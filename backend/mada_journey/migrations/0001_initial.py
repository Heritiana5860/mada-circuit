# Generated by Django 5.2 on 2025-09-17 09:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import mada_journey.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('titre', models.CharField(max_length=200)),
                ('contenu', models.TextField()),
                ('datePublication', models.DateTimeField(default=django.utils.timezone.now)),
                ('auteur', models.CharField(blank=True, max_length=100, null=True)),
                ('tags', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ['-datePublication'],
            },
        ),
        migrations.CreateModel(
            name='Circuit',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('titre', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('duree', models.IntegerField(help_text='Durée en jours')),
                ('prix', models.DecimalField(decimal_places=2, max_digits=10)),
                ('inclus', models.TextField(blank=True, help_text="Services inclus (ex: hébergement, guide, petit-déjeuner), lister en separant par ';'")),
                ('non_inclus', models.TextField(blank=True, help_text="Services non inclus (ex: essence, péages), lister en separant par ';'")),
                ('destination', models.CharField(blank=True, help_text='Destination principale du circuit', max_length=100)),
                ('region', models.CharField(blank=True, help_text='Région principale du circuit', max_length=100)),
                ('saison', models.CharField(blank=True, help_text='Saison recommandée pour ce circuit', max_length=100)),
                ('image', models.ImageField(blank=True, null=True, upload_to=mada_journey.models.circuit_image_path)),
                ('difficulte', models.CharField(choices=[('FACILE', 'Facile'), ('MOYEN', 'Moyen'), ('DIFFICILE', 'Difficile')], default='FACILE', max_length=10)),
                ('type_circuit', models.CharField(choices=[('pangalane', 'Pangalane'), ('circuit', 'Circuit'), ('solidaire', 'Solidaire')], default='circuit', help_text='circuit avec voiture, circuit sur canal de pangalanes avec bateau, circuit pour la visite solidaire', max_length=20, verbose_name='Type de circuit')),
                ('transport', models.CharField(choices=[('voiture', 'Voiture'), ('bateau', 'Bateau')], default='voiture', max_length=255, verbose_name='Transport')),
            ],
        ),
        migrations.CreateModel(
            name='ContactUsModele',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=200, verbose_name='Nom')),
                ('prenom', models.CharField(max_length=200, verbose_name='Prenom')),
                ('email', models.CharField(max_length=200, verbose_name='Email')),
                ('tel', models.CharField(max_length=200, verbose_name='Contact')),
                ('objet', models.CharField(max_length=200, verbose_name='Objet')),
                ('message', models.TextField(verbose_name='Message')),
                ('date_envoi', models.DateTimeField(auto_now_add=True, verbose_name="Date d'envoi")),
            ],
        ),
        migrations.CreateModel(
            name='Faq',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question', models.CharField(max_length=255, verbose_name='Question')),
                ('reponse', models.TextField(verbose_name='Reponse')),
                ('faq_type', models.CharField(choices=[('SOLIDAIRE', 'solidaire'), ('SURMESURE', 'surMesure'), ('CIRCUIT', 'circuit'), ('VEHICULE', 'vehicule')], default='CIRCUIT', max_length=20, verbose_name='Type')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'FAQ',
                'verbose_name_plural': 'FAQs',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='LieuAVisiter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Lieu à visiter',
                'verbose_name_plural': 'Lieux à visiter',
            },
        ),
        migrations.CreateModel(
            name='Personnel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
                ('prenom', models.CharField(max_length=100)),
                ('contact', models.CharField(max_length=20)),
                ('email', models.CharField(max_length=200)),
                ('adresse', models.CharField(max_length=200)),
                ('specialite', models.CharField(help_text="Lister les specialitées en separant par ';'", max_length=100)),
                ('langues', models.CharField(help_text="Lister les langues en separant par ';'", max_length=200)),
                ('biographie', models.TextField(blank=True, null=True)),
                ('status', models.CharField(max_length=200)),
                ('photo', models.ImageField(upload_to='personnel_image')),
            ],
        ),
        migrations.CreateModel(
            name='SurMesureActivite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Activité',
                'verbose_name_plural': 'Activités',
            },
        ),
        migrations.CreateModel(
            name='Vehicule',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('marque', models.CharField(help_text='Marque du véhicule (ex: Toyota, Ford)', max_length=100)),
                ('modele', models.CharField(help_text='Modèle du véhicule (ex: Corolla, Focus)', max_length=100)),
                ('annee', models.IntegerField()),
                ('prix', models.DecimalField(decimal_places=2, max_digits=10)),
                ('capacite', models.IntegerField(blank=True, help_text='Nombre de places assises')),
                ('type', models.CharField(blank=True, help_text='Type de véhicule (ex: 4x4, berline)', max_length=100)),
                ('langue', models.CharField(blank=True, help_text='Langue parlé par le chauffeur, ex: Anglais, Français, ...', max_length=100, null=True)),
                ('etat', models.CharField(choices=[('DISPONIBLE', 'Disponible'), ('RESERVE', 'Réservé'), ('MAINTENANCE', 'En maintenance')], default='DISPONIBLE', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('nom', models.CharField(max_length=100)),
                ('prenom', models.CharField(max_length=100)),
                ('telephone', models.CharField(blank=True, max_length=20, null=True)),
                ('role', models.CharField(choices=[('CLIENT', 'Client'), ('ADMIN', 'Admin'), ('COMMERCIAL', 'Commercial')], default='CLIENT', max_length=20)),
                ('date_inscription', models.DateTimeField(default=django.utils.timezone.now)),
                ('image', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='utilisateur_set', related_query_name='utilisateur', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='utilisateur_set', related_query_name='utilisateur', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BlogCommentaire',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('contenu', models.TextField()),
                ('date_commentaire', models.DateTimeField(default=django.utils.timezone.now)),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commentaires', to='mada_journey.blog')),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commentaires_blog', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BlogImage',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('file', models.FileField(upload_to=mada_journey.models.blog_media_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'mp4', 'mov', 'avi'])])),
                ('titre', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('ordre', models.IntegerField(default=0, help_text="Ordre d'affichage")),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medias', to='mada_journey.blog')),
            ],
            options={
                'ordering': ['ordre'],
            },
        ),
        migrations.CreateModel(
            name='CircuitImage',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to=mada_journey.models.circuit_image_path)),
                ('titre', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('ordre', models.IntegerField(default=0, help_text="Ordre d'affichage")),
                ('circuit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='mada_journey.circuit')),
            ],
            options={
                'ordering': ['ordre'],
            },
        ),
        migrations.CreateModel(
            name='Itineraire',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('jour', models.PositiveIntegerField(default=1, help_text='Jour 1, Jour 2...')),
                ('type_itineraire', models.CharField(choices=[('trajet', 'Trajet'), ('sejour', 'Séjour')], default='trajet', help_text="Type d'étape", max_length=10)),
                ('lieu_depart', models.CharField(blank=True, help_text='Lieu de départ (pour trajets)', max_length=100, null=True)),
                ('lieu_arrivee', models.CharField(blank=True, help_text="Lieu d'arrivée (pour trajets)", max_length=100, null=True)),
                ('distance_km', models.FloatField(blank=True, help_text='Distance estimée (km)', null=True)),
                ('duree_trajet', models.FloatField(blank=True, help_text='Durée estimée (heures)', null=True)),
                ('lieu', models.CharField(blank=True, help_text='Lieu de séjour', max_length=100, null=True)),
                ('nuitees', models.PositiveIntegerField(blank=True, default=1, help_text='Nombre de nuitées', null=True)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description détaillée')),
                ('carte_gps', models.URLField(blank=True, help_text="Lien vers l'itinéraire GPS", null=True)),
                ('circuit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='itineraires', to='mada_journey.circuit')),
            ],
            options={
                'verbose_name': 'Itinéraire',
                'verbose_name_plural': 'Itinéraires',
                'ordering': ['jour'],
            },
        ),
        migrations.CreateModel(
            name='PointInteret',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('type', models.CharField(choices=[('NATURE', 'Nature'), ('CULTURE', 'Culture'), ('GASTRONOMIE', 'Gastronomie')], default='CULTURE', help_text="Catégoriser les points d'intérêt", max_length=100)),
                ('temps_visite', models.FloatField(default=1.0, help_text='Durée recommandée (heures)')),
                ('prix_entree', models.DecimalField(blank=True, decimal_places=2, help_text="Coût d'entrée si applicable", max_digits=6, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to=mada_journey.models.point_interet_image_path)),
                ('circuit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_interet', to='mada_journey.circuit')),
            ],
        ),
        migrations.CreateModel(
            name='SurMesure',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('point_depart', models.CharField(blank=True, max_length=200, null=True, verbose_name='Point de depart')),
                ('point_arrivee', models.CharField(blank=True, max_length=200, null=True, verbose_name="Point d'arrivée")),
                ('date_debut', models.DateField(help_text='Date de début du voyage', verbose_name='Date de départ')),
                ('date_fin', models.DateField(help_text='Date de fin du voyage', verbose_name='Date de retour')),
                ('duree', models.PositiveIntegerField(help_text='Durée du voyage en jours', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Durée (jours)')),
                ('nombre_de_personne', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Nombre de personnes')),
                ('hebergement', models.CharField(choices=[('STANDARD', 'standard'), ('CONFORT', 'confort'), ('LUXE', 'luxe')], default='STANDARD', max_length=20, verbose_name="Type d'hébergement")),
                ('budget', models.CharField(max_length=200, verbose_name='Budget')),
                ('nom', models.CharField(max_length=200, verbose_name='Nom')),
                ('prenom', models.CharField(max_length=200, verbose_name='Prenom')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='Adresse e-mail')),
                ('contact', models.CharField(help_text='Numéro de téléphone', max_length=20, verbose_name='Numéro de contact')),
                ('commentaire', models.TextField(blank=True, help_text='Informations ou demandes particulières', verbose_name='Commentaires supplémentaires')),
                ('lieu_visiter', models.ManyToManyField(blank=True, help_text='Liste des lieux que le client souhaite visiter', to='mada_journey.lieuavisiter', verbose_name='Lieux à visiter')),
                ('activite', models.ManyToManyField(blank=True, help_text='Liste des activités que le client souhaite faire', to='mada_journey.surmesureactivite', verbose_name='Activités souhaitées')),
            ],
        ),
        migrations.CreateModel(
            name='Testimonia',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('score', models.PositiveIntegerField(help_text='Entrez un score entre 1 et 6', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)], verbose_name='Score')),
                ('description', models.TextField(help_text='Un petit témoignage', verbose_name='Description')),
                ('type', models.CharField(choices=[('CIRCUIT', 'circuit'), ('VEHICULE', 'vehicule'), ('SURMESURE', 'surMesure'), ('PANGALANES', 'pangalanes')], default='CIRCUIT', max_length=30, verbose_name='Type')),
                ('status', models.BooleanField(default=False, verbose_name='Statut')),
                ('post_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de publication')),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='testimonia', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Témoignage',
                'verbose_name_plural': 'Témoignages',
                'ordering': ['-post_date'],
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('vehicule', 'Véhicule'), ('circuit', 'Circuit')], default='vehicule', max_length=20, verbose_name='Reservation Type')),
                ('date_reservation', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_depart', models.DateTimeField()),
                ('date_fin', models.DateTimeField()),
                ('statut', models.CharField(choices=[('EN_ATTENTE', 'En attente'), ('CONFIRMEE', 'Confirmée'), ('ANNULEE', 'Annulée'), ('TERMINEE', 'Terminée')], default='EN_ATTENTE', max_length=20)),
                ('duree', models.IntegerField()),
                ('nombre_personnes', models.IntegerField()),
                ('hebergement', models.CharField(choices=[('STANDARD', 'Standard'), ('CONFORT', 'Confort'), ('LUXE', 'Luxe')], default='STANDARD', max_length=20)),
                ('activite', models.CharField(choices=[('RANDONNEE', 'Randonnée'), ('PLAGE', 'Plage'), ('SAFARI', 'Safari'), ('PLONFEE', 'Plongée'), ('CULTURE', 'Culture'), ('GASTRONOMIE', 'Gastronomie')], default='RANDONNEE', max_length=20)),
                ('budget', models.CharField(blank=True, max_length=100, null=True)),
                ('nom', models.CharField(max_length=100)),
                ('prenom', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('telephone', models.CharField(max_length=20)),
                ('commentaire', models.TextField(blank=True, null=True)),
                ('circuit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='mada_journey.circuit')),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to=settings.AUTH_USER_MODEL)),
                ('vehicule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='mada_journey.vehicule')),
            ],
        ),
        migrations.CreateModel(
            name='VehiculeImage',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to=mada_journey.models.vehicule_image_path)),
                ('titre', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('ordre', models.IntegerField(default=0, help_text="Ordre d'affichage")),
                ('vehicule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='mada_journey.vehicule')),
            ],
            options={
                'ordering': ['ordre'],
            },
        ),
    ]
